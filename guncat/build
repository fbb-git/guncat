#!/usr/bin/icmake -qt/tmp/guncat

#define LOGENV "GUNCAT"

#include "icmconf"

list    g_log;
string  
    g_logPath = getenv(LOGENV)[1],
    g_logMark,          // unique-marker for g_log entries
    g_cwd = chdir("");  // initial working directory, ends in /

int g_echo = ON;        // MODIFIED, existing variable

int g_installing;       // set to 1 by install.
int g_lognr;            // unique-marker number counter for g_log entries


#include "icmake/setopt"
#include "icmake/cuteoln"
#include "icmake/backtick"
#include "icmake/run"
#include "icmake/md"
#include "icmake/findall"
#include "icmake/loginstall"
#include "icmake/logzip"
#include "icmake/logfile"
#include "icmake/uninstall"
#include "icmake/pathfile"
#include "icmake/precompileheaders"

#include "icmake/special"

#include "icmake/clean"
#include "icmake/manpage"
#include "icmake/install"
#include "icmake/github"

void main(int argc, list argv)
{
    string option;
    string strip;

    if (argv[1] == "-q")
    {
        g_echo = OFF;
        argv -= (list)"-q";
    }

    echo(g_echo);

    option = argv[1];

    if (option == "clean")
        clean(0);

    if (option == "distclean")
        clean(1);

    if (option == "install")
        install(argv[2], argv[3]);

    if (option == "uninstall")
        uninstall(argv[2]);

    if (option != "")
        special();

    if (option == "github")
        github();

    if (option == "man")
        manpage();

    if (option == "library")
    {
        precompileHeaders();
        system("icmbuild library");
        exit(0);
    }

    if (argv[2] == "strip")
        strip = "strip";
    
    if (option == "program")
    {
        precompileHeaders();
        system("icmbuild program " + strip);
        exit(0);
    }

    if (option == "xref")
    {
        precompileHeaders();
        system("icmbuild program " + strip);
        run("oxref -fxs tmp/lib" LIBRARY ".a > " PROGRAM ".xref");
        exit(0);
    }

    printf("Usage: build [-q] what\n"
        "Where\n"
        "   [-q]:   run quietly, do not show executed commands\n"
        "`what' is one of:\n"
        "   clean                - clean up remnants of previous "
                                                      "compilations\n"
        "   distclean            - clean + fully remove tmp/\n"
        "   library              - build " PROGRAM "'s library\n"
        "   man                  - build the man-page (requires "
                                                      "Yodl)\n"
        "   program [strip]      - build " PROGRAM " (optionally "
                                                      "strip the\n"
        "                          executable)\n"
        "   xref [strip]         - same a `program', also builds "
                                                      "xref file\n"
        "                          using oxref\n"
        "   install selection [base] - to install the software in the \n"
        "                         locations defined in the INSTALL.im file,\n"
        "                         optionally below base\n"
        "                         selection can be\n"
        "                               x, to install all components,\n"
        "                         or a combination of:\n"
        "                               b (binary program),\n"
        "                               d (documentation),\n"
        "                               m (man-pages)\n"
        "   uninstall logfile   - remove files and empty directories listed\n"
        "                         in the file 'logfile'\n"
        "   github               - prepare github's gh-pages update\n"
        "                          (internal use only)\n"
        "\n"
    );
    exit(0);
}
